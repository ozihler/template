package com.zihler;

import com.zihler.courses.dataaccess.Course;
import com.zihler.courses.dataaccess.CourseSection;
import com.zihler.courses.dataaccess.CourseSectionsRepository;
import com.zihler.courses.dataaccess.CoursesRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.ApplicationArguments;
import org.springframework.boot.ApplicationRunner;
import org.springframework.stereotype.Component;

@Component
public class TestDataLoader implements ApplicationRunner {

    private final CoursesRepository coursesRepository;
    private final CourseSectionsRepository courseSectionsRepository;

    @Autowired
    public TestDataLoader(CoursesRepository coursesRepository, CourseSectionsRepository courseSectionsRepository) {
        this.coursesRepository = coursesRepository;
        this.courseSectionsRepository = courseSectionsRepository;
    }

    @Override
    public void run(ApplicationArguments args) {
        Course course = new Course();
        course.setTitle("Clean Code");
        course.setDescription("Clean Code Workshop");
        course.setThumbnailUrl("https://images-eu.ssl-images-amazon.com/images/I/51d1qVhmAmL.jpg");
        course.setRating(5L);
        coursesRepository.save(course);

        CourseSection courseSection = new CourseSection();
        courseSection.setCourse(course);
        courseSection.setTitle("Magic Number / Magic String");
        courseSection.setMarkdown("## <span style=\"color:orange\">Explanation</span>\nMeaning or purpose of number or string is not obvious.\n## <span style=\"color:orange\">Example</span>\n```java\nColor c = new Color(\"1\");\nint i = 42;\nString s = \"abc\";\n```\n## <span style=\"color:orange\">Reason</span>\nCode is not self-explanatory. Future developers may not understand why the value was chosen.\n## <span style=\"color:orange\">How to fix it?</span>\nIntroduce explaining local variable, class constant, or enum.\nSet value by explicit calculation (especially useful for expected test results). \n\nTests often become clearer if the values are directly used and the purpose is defined in a proper test name. \n## <span style=\"color:orange\">How does the smell arise?</span>\nWriter didn’t consider, whether the meaning or purpose of an expression was clear for other readers or not.\n\nSolely thinking on implementation level (how level) instead of domain abstractions (what level)\n\n## <span style=\"color:orange\">Edge cases - When is it ok?</span>\nSimple constants like 0 and 1, e.g. used as loop index, for(int i = 0;…), should not be extracted to “startIndex” or similar variables.\n\nEnd-user strings or log entries (they should be self-explanatory).\n");
        courseSectionsRepository.save(courseSection);

        courseSection = new CourseSection();
        courseSection.setCourse(course);
        courseSection.setTitle("Redundant Comment");
        courseSection.setMarkdown("## Explanation\nComment that only repeats what is obvious from the code already.\n## Example\n```java\n// Calculates a substring of the given input and never returns null\npublic String substring(String input, int length) {\n    // If invalid length was provided, return null\n    if (length < 0) {\n        return null;\n    }\n    return input.substring(length);\n}\n```\n\n## Reason\nViolates Don’t Repeat Yourself Principle (D.R.Y.): bloats code and eventually becomes inconsistent with the implementation. \nMay violate Single Responsibility Principle (SRP): if a method needs comments, it may try to accomplish too many things.\n## How to fix it?\nRemove it and don’t comment trivial pieces of code.\nSwitch off automatic template generators (like Java Doc for simple getters/setters).\n## How does the smell arise?\nAutomatically generated by the IDE.\nSmart-ass coding guidelines that require comments on all public methods.\n## Edge cases - When is it ok?\nDocumentation of exceptional cases or hacks, for which self-explanatory code is complicated to write.\nPublic APIs that document its usage to potential users.\nComplicated Regular Expressions (RegEx).\nComments on class level that add additional information not possible to represent by code (e.g. references to projects, requirements documents, etc.).\r\n");
        courseSectionsRepository.save(courseSection);
    }
}
